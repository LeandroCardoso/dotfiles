#! /usr/bin/env bash

# Global variables
USERTAG=LCA
export LOCK_CFG_KEY=0x00ff5656

_setpn()
{
    if [[ $COMP_CWORD != 1 ]]; then
        return
    fi

    local cur="${COMP_WORDS[$COMP_CWORD]}"
    local opts

    if [[ $cur ]]; then
        opts=$(ls $HOME/pn | grep $cur)
    else
        opts=$(ls $HOME/pn)
    fi

    COMPREPLY=($(compgen -W "${opts}"))
}

complete -F _setpn setpn

setpn()
{
    if [[ $# != 1 || ! -d $HOME/pn/$1 ]]; then
        echo "Usage: setpn <pn>"
        return
    fi

    export PNPATH=$HOME/pn/$1
    touch $PNPATH

    if [[ ! -e $PNPATH/dsm ]]; then
        echo Creating $PNAPTH/dsm
        mkdir $PNPATH/dsm
    fi    

    local pn=$(basename $PNPATH)
    
    export PNNUMBER=${pn%_*}
    export CUSTOMER=${pn#*_}
    echo PN: $PNNUMBER
    echo Customer: $CUSTOMER
    screen_title

    alias cdpn="cd $PNPATH"
    alias cqnotehistoryupdate="cqnotehistory ${PNNUMBER} > ${PNPATH}/notehistory"

    # Update CDPATH
    setcdpath
}

setdatabase()
{
    local DATABASE_FILE="${RELEASEPATH}/database"
    local NEW_DATABASE="$1"

    # if parameter is empty then read the database from file
    if [[ -z $NEW_DATABASE && -f $DATABASE_FILE ]]; then
        NEW_DATABASE=$(<$DATABASE_FILE)
    fi

    # if the file is empty then ask for the database
    while [[ -z $NEW_DATABASE ]]; do
        echo "Enter Database Name:"
        read NEW_DATABASE
    done

    # save to file
    if [[ -d $RELEASEPATH ]]; then
        echo $NEW_DATABASE > "$DATABASE_FILE"
    fi

    echo Setting database: $NEW_DATABASE

    export DB_NAME=$NEW_DATABASE
    export BSCSDB=$NEW_DATABASE
    export TWO_TASK=$NEW_DATABASE
    export ORACLE_SID=$NEW_DATABASE
    export BALANCEDB=$NEW_DATABASE
    export TARGET_DB=$NEW_DATABASE

    alias sqlp="sqlplus SYSADM/SYSADM@$NEW_DATABASE"
}

echodatabase()
{
    echo DB_NAME:$DB_NAME
    echo BSCSDB:$BSCSDB
    echo TWO_TASK:$TWO_TASK
    echo ORACLE_SID:$ORACLE_SID
    echo BALANCEDB:$BALANCEDB
    echo TARGET_DB:$TARGET_DB
}

setcdpath()
{
    # The all powerfull "cd everywhere"
    #export CDPATH=".:$BSCS_WORKDIR:$MAIN/..:$MAIN:$MAIN/src:$MAIN/src/mp:$MAIN/src/rp/rcc/srv/src:$MAIN/src/rp/crc/srv/src"

    unset CDPATH
    local newpath
    
    for newpath in "." "$BSCS_WORKDIR" "$MAIN/.." "$MAIN" "$MAIN/src" "$MAIN/src/mp" "$MAIN/src/mp/fih" "$MAIN/src/mp/fih_k" "$MAIN/src/rp/rcc/srv/src" "$MAIN/src/rp/crc/srv/src" "$SDPX_MAINPATH" "$SDPX_MAINPATH/bsp" "$SDPX_MAINPATH/sdp" "$SDPX_MAINPATH/tmnsdp" "$PNPATH"; do
        if [[ -d $newpath && ":$CDPATH:" != *:$newpath:* ]]; then
            export CDPATH=$CDPATH:$newpath
        fi
    done
}

_setbscs()
{
    if [[ $COMP_CWORD != 1 ]]; then
        return
    fi

    local cur="${COMP_WORDS[$COMP_CWORD]}"
    local opts

    if [[ $cur ]]; then
        opts=$(ls $HOME/release | grep $cur)
    else
        opts=$(ls $HOME/release)
    fi

    COMPREPLY=($(compgen -W "${opts}"))
}

complete -F _setbscs setbscs

setbscs()
{
    if [[ $# != 1 || ! -d $HOME/release/$1 ]]; then
        echo "Usage: setbscs <release>"
        return
    fi

    export RELEASEPATH=$HOME/release/$1
    touch $RELEASEPATH

    export RELEASE=$(basename $RELEASEPATH)
    export CUSTOMER=${RELEASE##*_}
    export BSCS_VERSION=$(cat "${RELEASEPATH}/version" 2>/dev/null)
    export MAIN=${RELEASEPATH}/main/batch # It is set to same point as the profile
    export BSCS_WORKDIR=${RELEASEPATH}/work/

    echo Release: $RELEASE
    echo Customer: $CUSTOMER
    echo BSCS Version: $BSCS_VERSION
    echo Main: $MAIN
    echo Work: $BSCS_WORKDIR
    echo Platform/hostname: $(tail -1 ${RELEASEPATH}/uname 2>/dev/null)
    echo Database: $(cat "${RELEASEPATH}/database" 2>/dev/null)
    screen_title

    if [[ ! $RELEASE ]]; then
        echo Error: Invalid RELEASE
        return 1
    fi

    if [[ $BSCS_VERSION == !(5|6|7|8|havana|istanbul|jerez|kiev) ]]; then
        echo Error: Invalid BSCS version
        return 1
    fi

    if [[ ! -d $MAIN ]]; then
        echo Warning: Main Path does not exist: $MAIN
    fi
    if [[ ! -d $BSCS_WORKDIR ]]; then
        echo Warning: Work Path does not exist: $BSCS_WORKDIR
        echo Creating Work Path: $HOME/work/$RELEASE 
        mkdir "$HOME/work/$RELEASE"
    fi

    # Update CDPATH
    setcdpath
    
    alias cdrelease="cd $RELEASEPATH"
    alias cdview="cd ${RELEASEPATH}/view"
    alias cdmain="cd $MAIN"
    alias cdwork="cd $BSCS_WORKDIR"
    alias cdconf="cd $BSCS_WORKDIR/CONF"
    alias lsctrl="ls $BSCS_WORKDIR/CTRL"
    alias rmctrl="rm $BSCS_WORKDIR/CTRL/*"
    alias rmfgctrl="rm $BSCS_WORKDIR/FG_CTRL/*"
    alias lslog="ls $BSCS_WORKDIR/LOG"
    alias rmlog="rm $BSCS_WORKDIR/LOG/*"
    alias rmmp="find $BSCS_WORKDIR/MP/ -type f | xargs rm"
    alias lstmp="ls $BSCS_WORKDIR/TMP"
    alias rmtmp="find $BSCS_WORKDIR/TMP/ -type f -exec rm {} \;"
    alias rmqueues="rm -irf $BSCS_WORKDIR/QUEUES/*"

    alias updatedb="updatedb -l 0 -U $MAIN -o $MAIN/locate.db"
    alias locate="locate -d $MAIN/locate.db"
    
    alias mkctags="find $MAIN/src -follow -name '*.c' -o -name '*.cpp' -o -name '*.pc' -o -name '*.pcpp' -o -name '*.h' -o -name '*.hpp' -print0 | xargs -0 ctags -e --extra=+fq --langmap=c:+.pc,c++:+.pcpp -f - | gzip > $MAIN/src/TAGS.gz"

    alias mketags="find $MAIN/src -follow \( -path $MAIN/src/udrlib/st -o -path $MAIN/src/udrlib/mt \) -prune -o \( -name '*.c' -o -name '*.cpp' -o -name '*.pc' -o -name '*.pcpp' -o -name '*.h' -o -name '*.hpp' \) -print0 | xargs -0 etags -o - | gzip > $MAIN/src/TAGS.gz"
}

fixbscs5()
{
    if [[ $RELEASE == *bscs_5.23* && -d $RELEASEPATH/main ]]; then
        if [[ ! -e $RELEASEPATH/main/batch ]]; then
            echo ln -s $RELEASEPATH/main/usa/batch/kernel $RELEASEPATH/main/batch
            ln -s $RELEASEPATH/main/usa/batch/kernel $RELEASEPATH/main/batch
        fi
        if [[ ! -e $RELEASEPATH/main/batch/kernel ]]; then
            echo ln -s $RELEASEPATH/main/batch $RELEASEPATH/main/batch/kernel
            ln -s $RELEASEPATH/main/batch $RELEASEPATH/main/batch/kernel
        fi
    fi
}

_mkbscs()
{
    if [[ $COMP_CWORD != 1 ]]; then
        return
    fi

    local releases="bscs_5.23_ bscs_6.00_ bscs_7.00_ bscs_8.01_ bscs_ix_ bscsix_r2_ bscsix_r3 cbio_r2.1_ cbio_r2.2_"

    local cur="${COMP_WORDS[$COMP_CWORD]}"
    local opts
    local opt

    if [[ $cur ]]; then
        for opt in $releases; do
            if [[ $opt == *$cur* ]]; then
                opts="$opts $opt"
            fi
        done
    else
        opts=$releases
    fi

    COMPREPLY=($(compgen -W "${opts}"))
}

complete -o nospace -F _mkbscs mkbscs

mkbscs()
{
    if [[ $# != 1 ]]; then
        echo "Usage: mkbscs <release>"
        return
    fi

    local RELEASEPATH="$HOME/release/$1"
    if [[ ! -e $RELEASEPATH ]]; then
        mkdir $RELEASEPATH
    fi
    touch $RELEASEPATH

    local RELEASE=$(echo $RELEASEPATH | sed "s/.*\///")

    # Automatic set BSCS version
    local BSCS_VERSION
    
    if [[ $RELEASE == *bscs_5.23* ]]; then
        BSCS_VERSION=5
    elif [[ $RELEASE == *bscs600* || $RELEASE == *bscs_6.00* ]]; then
        BSCS_VERSION=6
    elif [[ $RELEASE == *bscs_7.00* ]]; then
        BSCS_VERSION=7
    elif [[ $RELEASE == *bscs_8.01* ]]; then
        BSCS_VERSION=8
    elif [[ $RELEASE == *havana* || $RELEASE == *bscs_ix_* ]]; then
        BSCS_VERSION=havana
    elif [[ $RELEASE == *istanbul* || $RELEASE == *bscsix_r2_* ]]; then
        BSCS_VERSION=istanbul
    elif [[ $RELEASE == *jerez* || $RELEASE == *bscsix_r3_* ]]; then
        BSCS_VERSION=jerez
    elif [[ $RELEASE == *kiev* || $RELEASE == *cbio_r2.1* || $RELEASE == *cbio_r2.2* ]]; then
        BSCS_VERSION=kiev
    else
        # Manual set BSCS version
        echo Could not detect BSCS version
        echo Select BSCS version
        select BSCS_VERSION in 5 6 7 8 havana istanbul jerez kiev; do
            if [[ -n $BSCS_VERSION ]]; then
                break
            fi
            echo Invalid Option. Type again
        done
    fi
    echo $BSCS_VERSION > "$RELEASEPATH/version"

    # Define VOB
    local VOB

    case $BSCS_VERSION in
        "5")
            if [[ $RELEASE == *bscs_5.23_cml* ]]; then
                VOB="lan_cml"
            else
                VOB="nam_next"
            fi
            ;;
        "6")
            VOB=sbu_bscs
            ;;
        "7" | "8")
            if [[ $RELEASE == *tpr* ]]; then
                VOB=bscs7_atl
            else
                VOB=but_bscs
            fi
            ;;
        "havana" | "istanbul")
            VOB=bsst_main
            ;;
        "jerez" | "kiev")
            VOB=lhsj_main
            ;;
        *)
            echo Invalid BSCS Version: $BSCS_VERSION
            return 1
            ;;
    esac

    # Set VIEW
    ln -s "${HOME}/views/${USER}_${RELEASE}/" "${RELEASEPATH}/view"

    # Set MAIN
    ln -s "${HOME}/views/${USER}_${RELEASE}/vobs/${VOB}/bscs" "${RELEASEPATH}/main"

    # set SRC
    ln -s "${HOME}/views/${USER}_${RELEASE}/vobs/${VOB}/bscs/batch/src" "${RELEASEPATH}/src"

    # SET WORK
    ln -s "${HOME}/work/${RELEASE}" "${RELEASEPATH}/work"
}

setshm()
{
    echo Set Shared Memory to default settings
    export SHM_ENTRY_KEY=00ff5655
    export SHM_MAX_SECTORS=100
    export SHM_MAX_SEGMENTS=1000
    export SHM_MIN_SEGMENT_SIZE=262144
    export SHM_ALIGNMENT_SIZE=8388608
    export SHM_MAX_ENVIRONMENTS=100
}

setshmlarge()
{
    echo Set Shared Memory to large memory settings
    export SHM_ENTRY_KEY=00ff5655
    export SHM_MAX_SECTORS=100
    export SHM_MAX_SEGMENTS=10000
    export SHM_MIN_SEGMENT_SIZE=262144
    export SHM_ALIGNMENT_SIZE=8388608
    export SHM_MAX_ENVIRONMENTS=100
}

setprofile()
{
    local ERROR
    
    if [[ -z $MAIN ]]; then
        echo MAIN is not set
        ERROR=1
    fi

    if [[ -z $RELEASEPATH ]]; then
        echo RELEASEPATH is not set
        ERROR=1
    fi

    if [[ -z $BSCS_WORKDIR ]]; then
        echo BSCS_WORKDIR is not set
        ERROR=1
    fi

    [[ -n $ERROR ]] && return 1

    local host=$(uname -a)
    local lasthost=$(tail -1 "${RELEASEPATH}/uname" 2>/dev/null)
    
    echo Release: $RELEASE
    echo Customer: $CUSTOMER
    echo BSCS Version: $BSCS_VERSION
    echo Main: $MAIN
    echo Work: $BSCS_WORKDIR
    echo Platform/hostname: $lasthost
    echo Database: $(cat "${RELEASEPATH}/database" 2>/dev/null)

    # Check uname
    if [[ $host != $lasthost && $lasthost ]]; then
        echo WARNING: uname changing to: $host
    fi

    # Set Database variables
    setdatabase

    export AIH_BASE_DIR=$BSCS_WORKDIR
    export BDS_WORKDIR=$BSCS_WORKDIR
    export BRDS_WORKDIR=$BSCS_WORKDIR
    export BSCS_PASSWD=$MAIN/bscs.passwd
    export BSCS_RESOURCE=$MAIN/../install/resource
    export BSH_BASE_DIR=$BSCS_WORKDIR
    export BSH_DXL_TRACING=1
    export CCH_CONFIG_FILE_NAME=$BSCS_WORKDIR/CONF/rcc_cch_c_mod.cfg
    export CCH_WORKDIR=$BSCS_WORKDIR
    export CRH_WORKDIR=$BSCS_WORKDIR
    export DATA_SERVER_ADDRESS=T:$(hostname):12500
    export DATA_SERVER_STOPPED_PROFILES=3,4,8,13,16 # stop all queues which belong to rejections
    export DATA_SERVER_WORKDIR=$BSCS_WORKDIR
    export DIH_BASE_DIR=$BSCS_WORKDIR
    export DTA_TRACEFILE="$BSCS_WORKDIR/TMP/DATA.trc"
    export DXL_BASE_DIR=$BSCS_WORKDIR
    export DXL_TRACEFILE="$BSCS_WORKDIR/TMP/DXL.trc"
    export EOH_WORKDIR=$BSCS_WORKDIR
    export ESH_WORKDIR=$BSCS_WORKDIR
    export EVH_BASE_DIR=$BSCS_WORKDIR
    export EVH_DXL_TRACING=1
    export FIH_BASE_DIR=$BSCS_WORKDIR
    export FOH_BASE_DIRECTORY=$BSCS_WORKDIR
    export HOOKS_TRACEFILE="$BSCS_WORKDIR/TMP/HOOKS.trc"
    export LOCS_WORKDIR=$BSCS_WORKDIR
    export PCCH_WORKDIR=$BSCS_WORKDIR
    export RDH_WORKDIR=$BSCS_WORKDIR
    export REQHIST_WORKDIR=$BSCS_WORKDIR # used by CCH
    export RIH_BASE_DIR=$BSCS_WORKDIR
    export RLH_BASE_DIR=$BSCS_WORKDIR
    export RLH_DXL_TRACING=1
    export TEH_WORKDIR=$BSCS_WORKDIR
    export TRACE_PRIH=$BSCS_WORKDIR/CONF/PRih.tr
    export TRACE_RIH=$BSCS_WORKDIR/CONF/Rih.tr
    export UDR_TRACEFILE="$BSCS_WORKDIR/TMP/UDR.trc"
    export ZIH_BASE_DIR=$BSCS_WORKDIR

    # Compilation flags
    export DEBUG=1
    export USE_DEBUG=1
    # export DXL_DEBUG=1 # DXL
    # export MPSS_TRACE_SESSION=1 # MPSS
    export RIH_SET_TRACE=1 # RIH
    export RLH_PRINT_SQL=1 # RLH
    # export RULES_DEBUG=1 # RULESLIB
    export TRACE=1 # BAT FIH TEH
    export TRACE_ERRORS=1 # FIH_K TAPLIB
    # export TRACE_RDH_BIR_WRITING=1 # RDH
    # export TRACE_SESSION_HANDLER=1 # DXL UDRL COMMON
    export USE_TRACE=1 # FIH FIH_K

    # Execute profile
    if [[ ! -d $MAIN ]]; then
        echo Error: MAIN directoty is invalid: $MAIN
        return 1
    fi

    cd ${RELEASEPATH}/main/
    local PROFILE="bin/profile"

    if [[ ! -f $PROFILE ]]; then
        echo Error: profile file not found: ${PWD}/${PROFILE}
        return 1
    fi

    echo "Executing profile (press ENTER to continue)"
    read
    . $PROFILE
    echo Profile end

    # Save uname
    if [[ $host != $lasthost ]]; then
        echo $host >> "$RELEASEPATH/uname"
    fi

    # Pos-profile settings
    if [[ -z $BSCS_BIN || $BSCS_VERSION == 8 ]]; then
        export BSCS_BIN="$MAIN/bin/$MPDE_OSDIR"
        echo Set BSCS_BIN=$BSCS_BIN
    fi
    if [[ -z $BSCS_LIB || $BSCS_VERSION == 8 ]]; then
        export BSCS_LIB="$MAIN/lib/$MPDE_OSDIR"
        echo Set BSCS_LIB=$BSCS_LIB
    fi

    # export PATH=$PATH:$BSCS_BIN
    if [[ ":$PATH:" != *":$BSCS_BIN:"* ]]; then
        export PATH=$PATH:$BSCS_BIN
    fi

    # Licesing to RLH
    if [[ ":$LD_LIBRARY_PATH:" != *":$LICENSING_HOME"* ]]; then
        export LD_LIBRARY_PATH=$LICENSING_HOME/lib/$APP_OSID:$LD_LIBRARY_PATH
        export LD_LIBRARY_PATH=$LICENSING_HOME/3pp/$APP_OSID:$LD_LIBRARY_PATH
    fi

    # Set GDB shared library path to the BSCS and system libraries
    export GDB_SHLIB_PATH=$LD_LIBRARY_PATH

    if [[ -f $MAIN/../install/resource/cch/rcc_cch_c_mod.cfg ]]; then
        echo Copying $MAIN/../install/resource/cch/rcc_cch_c_mod.cfg to $BSCS_WORKDIR/CONF
        cp "$MAIN/../install/resource/cch/rcc_cch_c_mod.cfg" "$BSCS_WORKDIR/CONF"
    fi

    # Set Shared Memory
    setshm

    # SDPX
    if [[ $SUPERV ]]; then
        export SV_ALARM_CONNECT=$BSCS_LIB/libppr_repm.so
    else
        unset SV_ALARM_CONNECT
    fi

    # BSCS
    alias cdbin="cd $BSCS_BIN"
    alias cdlib="cd $BSCS_LIB"
    alias dataq='data --deletequeues'
    alias dmhs='dmh --shutdown'
    alias ptehkct='pteh -k -c -t'
    alias xbscsbatch='xbscs -batch -header'
    alias import_oracle='imp LOG=IMP_$BSCSDB.log COMMIT=Y FEEDBACK=1000 ANALYZE=Y RECALCULATE_STATISTICS=Y FULL=Y ROWS=Y CONSTRAINTS=Y GRANTS=Y INDEXES=Y'
    alias rlhsa="export RLH_NON_PERMANENT=STAND_ALONE"
    alias rlhnsa="unset RLH_NON_PERMANENT"

    # FIOT
    alias fiot_kill='fiot -MI -B 499'
    alias fiot_reload='fiot -MI -B 497'
    alias fiot_reload_bil='fiot -MI -B 493'
    alias fiot_reload_cat='fiot -MI -B 492'
    alias fiot_reload_cux='fiot -MI -B 496'
    alias fiot_reload_cx='fiot -MI -B 495'
    alias fiot_term='fiot -MI -B 498'

    # SDPX
    alias ccgwstart='ccgw 1 $CONFPATH/config.ini -n 1'

    # MAKE
    alias ma="gmake all"
    alias mas="gmake all -s"
    alias mi="gmake install"
    alias mis="gmake install -s"
    alias mai="gmake all instal"
    alias mais="gmake all instal -s"
    alias mc="gmake clean"
    alias mcs="gmake clean -s"
    alias mp="gmake purge"
    alias mps="gmake purge -s"
}

setpurify()
{
    echo Setting Purify
    export USE_PURIFY=1 
    . setapp purify
    export PURIFYOPTIONS="-log-file=purify.log -follow-child-processes=yes -verbose=yes -inuse_at_exit=yes -optimize-save-o7=no"
    echo PURIFYOPTIONS=$PURIFYOPTIONS
    export OLDPATH=$PATH
    export PATH=${BSCS_BIN/\/bin\//\/bin.purify\/}:$PATH
    alias cdbinpurify="cd ${BSCS_BIN/\/bin\//\/bin.purify\/}"
    alias cdlibpurify="cd ${BSCS_LIB/\/lib\//\/lib.purify\/}"
}

unsetpurify()
{
    echo Unsetting Purify
    unset USE_PURIFY
    unset PURIFYDIR
    unset PURIFYOPTIONS
    export PATH=$OLDPATH
    unalias cdbinpurify
    unalias cdlibpurify
}

setinsure()
{
    echo Setting Insure
    export USE_INSURE=1
    . setapp insure
    alias cdbininsure="cd ${BSCS_BIN/\/bin\//\/bin.insure\/}"
    alias cdlibinsure="cd ${BSCS_LIB/\/lib\//\/lib.insure\/}"
}

unsetinsure()
{
    echo Unsetting Insure
    unset USE_INSURE
    unset PARASOFT
    unalias cdbininsure
    unalias cdlibinsure
}

setsdpx()
{
    local ERROR

    if [[ -z $MAIN ]]; then
        echo MAIN is not set
        ERROR=1
    fi

    if [[ -z $RELEASEPATH ]]; then
        echo RELEASEPATH is not set
        ERROR=1
    fi

    if [[ -z $BSCS_VERSION ]]; then
        echo BSCS_VERSION is not set
        ERROR=1
    fi

    if [[ -z $BSCS_WORKDIR ]]; then
        echo BSCS_WORKDIR is not set
        ERROR=1
    fi

    if [[ -z $USERTAG ]]; then
        echo USERTAG is not set
        ERROR=1
    fi

    [[ -n $ERROR ]] && return 1

    echo USERTAG:$USERTAG

    case $BSCS_VERSION in
        "havana" | "istanbul")
            export SDPX_MAINPATH=${RELEASEPATH}/view/vobs/bsst_prepaid/Prepaid
            ;;
        "jerez" | "kiev")
            export SDPX_MAINPATH=${RELEASEPATH}/view/vobs/lhsj_prepaid/Prepaid
            ;;
        *)
            echo BSCS version: $BSCS_VERSION does not support prepaid
            return 1
            ;;
    esac

    echo SDPX_MAINPATH: $SDPX_MAINPATH

    if [[ ! -e $MAIN/../Prepaid ]]; then
        echo Creating Prepaid link
        ln -s "$SDPX_MAINPATH" "$MAIN/../Prepaid"
    fi

    # Check if SDPX is enable
    local RUNMODE
    if [[ -d $SDPX_MAINPATH ]]; then
        echo Select SDPX run mode
        select RUNMODE in "No SDPX" "Standalone" "Standalone with Supervisor" "High Availability Node 0" "High Availability Node 1"; do
            case $RUNMODE in
                "No SDPX")
                    unset SUPERV
                    export BSCS_WORKDIR="${RELEASEPATH}/work"
                    unset COUNTERPART_DATA_SERVER_WORKDIR
                    break
                    ;;
                "Standalone")
                    unset SUPERV
                    export BSCS_WORKDIR="${RELEASEPATH}/work"
                    unset COUNTERPART_DATA_SERVER_WORKDIR
                    break
                    ;;
                "Standalone with Supervisor")
                    SUPERV=0
                    export BSCS_WORKDIR="${RELEASEPATH}/work"
                    unset COUNTERPART_DATA_SERVER_WORKDIR
                    break
                    ;;
                "High Availability Node 0")
                    SUPERV=0
                    export BSCS_WORKDIR="${RELEASEPATH}/work"
                    export COUNTERPART_DATA_SERVER_WORKDIR="$RELEASEPATH/work1"
                    break
                    ;;
                "High Availability Node 1")
                    SUPERV=1
                    export BSCS_WORKDIR="${RELEASEPATH}/work1"
                    export COUNTERPART_DATA_SERVER_WORKDIR="$RELEASEPATH/work"
                    break
                    ;;
                *)
                    echo Invalid option. Type Again
                    ;;
            esac
        done
    else
        echo SDPX Disable
        unset SDPX_MAINPATH
        unset SUPERV
        return 0
    fi
    export SUPERV

    # Create the other Node
    if [[ -n $COUNTERPART_DATA_SERVER_WORKDIR ]]; then
        if [[ ! -d ${HOME}/work/${RELEASE}_work1 ]]; then
            echo Warning: Work Path of the other node does not exist: ${HOME}/work/${RELEASE}_work1
            echo Creating Work Path: ~/work/${RELEASE}_work1
            mkdir "${HOME}/work/${RELEASE}_work1"
        fi
        if [[ ! -e ${RELEASEPATH}/work1 ]]; then
            echo Creating link to work directory of the other node
            ln -s "${HOME}/work/${RELEASE}_work1" "${RELEASEPATH}/work1"
        fi
    fi
    
    echo Work Path: $BSCS_WORKDIR

    export SDP_WORKDIR=$BSCS_WORKDIR
    export CCGW_WORKDIR=$BSCS_WORKDIR
    export RSHD_WORKDIR=$BSCS_WORKDIR
    export SVCFG=$BSCS_WORKDIR/CONF/
    export SG5INI=$SVCFG/sdp.ini
    export SDPINI=$SG5INI
    export DATA_CONFIG_FILE=$SVCFG/DataConfigFile

    if [[ $BSCS_VERSION == 8 || $BSCS_VERSION == havana ]]; then
        export PPCC_FTOK_DIR=$BSCS_WORKDIR/TMP
        export PPCC_ENVIRONMENT_ID=C
        export GN_LOG_LEVEL=5
        export GN_LOG_PATH=$BSCS_WORKDIR/TMP
        export CCGW_LOG_FILE=ccgw.log
    fi

    # Overload database settings from RSHD_CONFIGURATION
    export SDP_MAXSUBCYCLE=10
    export SDP_DEFDURATIONCHUNK=90
    export SDP_UNCHARGABLEPER=10
    export SDP_DURATIONVOLUMEUMCODE=1
    export SDP_SHMNAME=SDP_SHM_${USERTAG}
    export SDP_SHMSIZE=9216000
    export SDP_SHMNUMELEM=4500
    export SDP_STARTUPWAITTIME=600
    export SDP_MINBALANCE=0.10
    export SDP_SHMNUMSEGM=1

    # Running with Supervisor
    if [[ $SUPERV ]]; then
        export SV_ALARM_PORT=12503
        export SV_SEM=12503
        export SV_KEY=12503
        export SDPUSER=$USERTAG
        export SVAPPLFILE=$SVCFG/application.ini
        export SDP_WORKDIR=$BSCS_WORKDIR
        export SV_ALARM_CONNECT=$BSCS_LIB/libppr_repm.so
    else
        unset SV_ALARM_PORT
        unset SV_SEM
        unset SV_KEY
        unset SDPUSER
        unset SVAPPLFILE
        unset SDP_WORKDIR
        unset SV_ALARM_CONNECT
    fi

    alias cdsdpx="cd $SDPX_MAINPATH"
    alias cdprepaid="cd $SDPX_MAINPATH"

    # Update CDPATH
    setcdpath
}
